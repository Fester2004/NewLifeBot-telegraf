const Scene = require("telegraf/scenes/base");
const { Markup } = require("telegraf");
const { Telegraf } = require('telegraf')

const bot = new Telegraf(process.env.BOT_TOKEN);

class SceneGenerator {
    StartGameScene() {
        const startGame = new Scene("startGame");
        startGame.enter(async (ctx) =>{
            const photo = "https://lutsk.rayon.in.ua/upload/news/1/2018-03/1519943828130/t_1_zamok.jpg";
            const buttons = Markup.inlineKeyboard([
                Markup.callbackButton("–ó–≤–∏—á–∞–π–Ω–æ üòâ", "Yes"),
                Markup.callbackButton("–¢—Ä–µ–±–∞ –ø–æ–¥—É–º–∞—Ç–∏  üòë", "No"),
            ]);
            const description = "–í–∏–±—Ä–∞–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –ø–æ–¥—ñ–π –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É." +
                "–ó–∞—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –Ω–µ —Ä–µ–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ—è—Ö.–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é?P.s.: __–ü–æ–¥—ñ—ó –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –≤ –õ—É—Ü—å–∫—É__ ü§´";
            await bot.telegram.sendPhoto(ctx.chat.id,photo, {
                caption:description,
                reply_markup:buttons,
            });
        })
        startGame.on("callback_query",async query => {
                if(query.callbackQuery.data === "Yes"){
                   await query.answerCbQuery("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è",true);
                   await query.scene.enter("name");
                }else {
                   await query.reply("–©–æ —Ç—É—Ç –¥—É–º–∞—Ç–∏ üôÑ ! –í —Ä–∞–∑—ñ —á–æ–≥–æ –≤–≤–µ–¥—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é.");
                }
        });
        return startGame;

    }
    GetNameScene() {
        const name = new Scene("name");
        name.enter( (ctx) => {
            ctx.reply("–ü—Ä–∏–≤—ñ—Ç –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –°–µ–ª—å–≤–∞–¥–æ—Ä–µ—Å ,–∞ —Ç–µ–±–µ?");
        })
        name.on("text", async (ctx) => {
            const name = ctx.message.text;
            if(typeof(name) == "string" && !(name>0)){
                console.log(typeof(name));
                await ctx.reply("–ü—Ä–∏–≤—ñ—Ç," + name);
                await ctx.scene.leave();
            }else {
                await ctx.reply("–ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏.... –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—Éü§Ø");
                await ctx.scene.reenter();
            }
        })
        name.on("message",async (ctx) =>{
            await ctx.reply("–ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏.... –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—Éü§Ø");
            await ctx.scene.reenter();
        })
        return name;
    }
}

module.exports = SceneGenerator;